--DDL is modify table adding new coloum ,table creation ,table coloum deletion,alter table 
--DDL command Create,drop,alter,truncate

--DML Data manipulate
--DML commands insert,update,delete,

--TCL Commit,rollback

--DQL Query language to see data
--DQL command select

--DCL 
--DCL command grant,rovoke

--DLOB convert img to bits
create table Byer(
Byer_name VARCHAR(30),
Bying_date  DATE DEFAULT sysdate
);

insert into Byer(Byer_name)values('Gokul');
select * from Byer;

create table customers(
cust_id int GENERATED BY default as identity,
cust_name varchar(40),
cust_add varchar(50),
ent_dt TIMESTAMP default systimestamp,
PRIMARY KEY(cust_id)
);

create table products(
prod_id int GENERATED BY default as identity,
prod_name varchar(40),
ent_dt TIMESTAMP default systimestamp,
cust_id int,
PRIMARY KEY(prod_id),
--the foreign key is being primary key in another table or previous table 
--the constraint will check the data value before insertion of data
--if the condition is not set inside the constrain it will show error to us
CONSTRAINT pk_custId foreign key (cust_id) REFERENCES customers (cust_id)
);
--The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign 
--key column, because it has to be one of the values contained in the parent table.

--The table with the foreign key is called the child table, and the table with the primary 
--key is called the referenced or parent table.

--A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.

drop table customers;
drop table products;

insert into customers(cust_name,cust_add) values('dinesh','porur');
--foringe key it will accept already the key has in privious value
select * from customers;

insert into products(prod_name,cust_id) values('good day',22);

select * from products;

select * from products p join customers c ON p.cust_id=c.cust_id;

--it will show the customer address whoever have porur
select * from products p join customers c ON p.cust_id=c.cust_id where c.cust_add='porur';

--and it will show the customer who is not in chennai
select * from products p join customers c ON p.cust_id=c.cust_id where not c.cust_add='porur';

--join and inner join both are equal
--right join is to print the right side vlues only
--join is only used when two tables has the comman field
select * from products p right join customers c ON p.cust_id=c.cust_id;

--left join is to print the left side table value only even tho righ table value is not there it will show null
select * from products p left join customers c ON p.cust_id=c.cust_id;

--inner join only show the value when the two table values are there otherwise it will not show any values
select * from products p inner join customers c ON p.cust_id=c.cust_id;

--cross join
--it will used to assigning all product to a single buyer
select * from Byer cross join products;

--we can join two table with any coloum name
select * from products p inner join customers c ON p.prod_name=c.cust_add;

select * from products p inner join customers c ON p.prod_name=c.cust_add and c.cust_id >21;

--if you want only product name and customer name only u need to use coloum name instead of *
select prod_name,cust_name from products p inner join customers c ON p.cust_id=c.cust_id; 

--if u want to change the coloum name as per u need u need to use this as methods
select prod_name as Product_Name,cust_name as Customer_Name from products p left join customers c ON p.cust_id=c.cust_id; 

--Nvl to display the value we give instead of null value,nvl only take value after ,when there is null value
select prod_name as Product_Name,nvl(cust_name,'nothing here') as Customer_Name from products p left join customers c ON p.cust_id=c.cust_id;


--case 
select case when p.prod_name='TVm'then p.prod_name else 'Pokesh' end 
as Product_Name,cust_name as Customer_Name from products p left join customers c ON p.cust_id=c.cust_id; 

--we can check any values in case  = < > !=
select case when c.cust_add is not null then c.cust_add else 'no addrress' end 
as Product_Address,nvl(c.cust_add,'nothing here') as Customer_Adrress from products p left join customers c ON p.cust_id=c.cust_id; 

select * from products;

--whild card(if you want to fetch some specific value but u forgot the full name of the value so u can get it by any two or three letter from that table data
select * from products where prod_name like 'C%';//it will show the all value of s starting valus(when we use % after the value)
select * from products where prod_name like '%i';//it will show the value of s ending valus(when we use % before the value)
select * from products where prod_name like '%p%';//it will show the value of s starting and ending valus(when we use %s% the value)
select * from products where prod_name like 'C%i';

--__it will show the value u want to print here if you forgot the middle value u can use _ _ _ as many u want based on how much letter to be printed
select * from products where prod_name like 'La___p';
select * from products where prod_name like '____e';
select * from products where prod_name like 'm_____ok';

select * from products p join customers c ON c.cust_add=p.prod_name;

--varchar should take empty space also as a value 

--there is a one methods called rtrim that works to removing space from the data 
--rtrim must use for string functions
select * from products p join customers c ON rtrim(p.prod_name)=rtrim(c.cust_add);

--Foriegn key and hoe to give referance to other table
--Joins -3 types left,right,inner
--Wildcard -%,[],_,like
--case nvl rtrim

--we can delete data if that data's if it's only in one table 
--if that data's in more that one table we can't delete a record
delete customers where cust_id=1;
